// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from game.djinni

package ru.tensor.generated;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Game {
    public abstract void enter();

    public abstract void run();

    public abstract void setDirection(int dx, int dy);

    public abstract Field getField();

    public static native Game instance();

    private static final class CppProxy extends Game
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void enter()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_enter(this.nativeRef);
        }
        private native void native_enter(long _nativeRef);

        @Override
        public void run()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_run(this.nativeRef);
        }
        private native void native_run(long _nativeRef);

        @Override
        public void setDirection(int dx, int dy)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setDirection(this.nativeRef, dx, dy);
        }
        private native void native_setDirection(long _nativeRef, int dx, int dy);

        @Override
        public Field getField()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getField(this.nativeRef);
        }
        private native Field native_getField(long _nativeRef);
    }
}
